import subprocess
from PIL import Image
import os
import sys

# --- CONFIGURATION DU CHEMIN ET DES FICHIERS ---

# Le chemin du script est utilis√© pour d√©terminer le dossier de travail ('assets')
# Ceci garantit que pngquant.exe sera trouv√©
ASSETS_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))

# Fichiers et ex√©cutable (doivent √™tre dans le dossier 'assets')
input_file_name = "logo-teo.png"
temp_file = "logo-teo_temp_palettized.png" # Fichier temporaire apr√®s traitement Pillow
output_file = "logo-teo_compressed_final.png"
pngquant_exec = "pngquant.exe"

# --- PR√âPARATION ---
# Sauvegarde du r√©pertoire de travail actuel et d√©placement vers le dossier 'assets'
current_working_dir = os.getcwd()
os.chdir(ASSETS_DIR)

print(f"R√©pertoire de travail : {ASSETS_DIR}")
print("-" * 40)

# --- √âTAPE 1 : Optimisation de Palette (avec PIL) ---

try:
    print(f"1/2. Pr√©paration de l'image source '{input_file_name}' (Optimisation de palette)...")
    
    img = Image.open(input_file_name)
    
    # Conserver la transparence (RGBA) puis convertir en mode Palette (P) 
    # pour r√©duire le nombre de couleurs et optimiser la compression PNG
    if img.mode != 'RGBA':
        img = img.convert('RGBA')
        
    # Convertir en mode 'P' (Palette) avec 256 couleurs pour un maximum de r√©duction
    img = img.convert('P', palette=Image.ADAPTIVE, colors=256) 
    
    # Sauvegarde temporaire du fichier pr√©par√©
    img.save(temp_file, optimize=True)
    
    print(f"   -> Image pr√©par√©e en mode palette : {temp_file}")
    
except Exception as e:
    print(f"\nüí• ERREUR PIL/Pillow : √âchec du traitement de l'image. Le message est : {e}")
    os.chdir(current_working_dir)
    sys.exit(1)


# --- √âTAPE 2 : Compression maximale (avec pngquant) ---

print(f"\n2/2. Compression finale avec Pngquant...")

try:
    # Ex√©cution de l'encodeur pngquant : 
    # Le param√®tre '--quality 65-80' est un excellent compromis pour le PNG
    subprocess.run([
        pngquant_exec,
        '--force',
        '--quality', '65-80', # Qualit√© visuelle (la perte sera minimale)
        '--output', output_file,
        temp_file
    ], check=True, capture_output=True, text=True)
    
    # --- Affichage des r√©sultats ---
    taille_originale = os.path.getsize(input_file_name) / 1024
    taille_compressee = os.path.getsize(output_file) / 1024
    
    print("\n" + "#" * 40)
    print(f"‚úîÔ∏è COMPRESSION TERMIN√âE AVEC SUCC√àS !")
    print(f"   Taille originale : {taille_originale:.2f} Ko")
    print(f"   Taille finale    : {taille_compressee:.2f} Ko")
    print(f"   Gain total : {100 - (taille_compressee / taille_originale * 100):.2f} %")
    print(f"   Fichier g√©n√©r√© : {output_file}")
    print("#" * 40)

except FileNotFoundError:
    print("\nüí• ERREUR CRITIQUE : Le programme 'pngquant.exe' n'a PAS √©t√© trouv√©.")
    print("Veuillez vous assurer qu'il est bien dans le dossier 'assets'.")

except subprocess.CalledProcessError as e:
    print(f"\nüí• ERREUR PNGQUANT : Le programme a √©chou√©. Le message d'erreur est : {e.stderr}")

finally:
    # Nettoyage : Supprimer le fichier temporaire
    if os.path.exists(temp_file):
        os.remove(temp_file)
        print(f"\nNettoyage : '{temp_file}' supprim√©.")

    # Retour au r√©pertoire initial
    os.chdir(current_working_dir)